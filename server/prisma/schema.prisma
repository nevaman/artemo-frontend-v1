// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  projects     Project[]
  chatSessions ChatSession[]

  @@map("users")
}

model Category {
  id           String   @id @default(uuid())
  name         String   @unique
  displayOrder Int      @map("display_order")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  tools Tool[]

  @@map("categories")
}

model Tool {
  id                 String   @id @default(uuid())
  title              String
  description        String
  categoryId         String   @map("category_id")
  active             Boolean  @default(true)
  featured           Boolean  @default(false)
  primaryModel       String   @map("primary_model")
  fallbackModels     String[] @map("fallback_models")
  promptInstructions String   @map("prompt_instructions") @db.Text
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  category         Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  questions        ToolQuestion[]
  knowledgeFiles   KnowledgeFile[]
  chatSessions     ChatSession[]

  @@map("tools")
}

model ToolQuestion {
  id          String      @id @default(uuid())
  toolId      String      @map("tool_id")
  label       String
  type        QuestionType
  placeholder String?
  required    Boolean     @default(true)
  order       Int
  options     String[]    @default([])
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  tool Tool @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@map("tool_questions")
}

model Project {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  name      String
  tags      String[] @default([])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatSessions ChatSession[]

  @@map("projects")
}

model ChatSession {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  toolId    String   @map("tool_id")
  projectId String?  @map("project_id")
  toolTitle String   @map("tool_title")
  messages  Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool    Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@map("chat_sessions")
}

model KnowledgeFile {
  id        String   @id @default(uuid())
  toolId    String?  @map("tool_id")
  filename  String
  filePath  String   @map("file_path")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  content   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  tool Tool? @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@map("knowledge_files")
}

enum Role {
  USER
  ADMIN
}

enum QuestionType {
  input
  textarea
  select
}